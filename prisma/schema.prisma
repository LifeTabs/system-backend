// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                 @id @default(autoincrement())
  uuid            String              @unique
  email           String?             @unique
  password        String?
  name            String?
  createdAt       DateTime            @default(now())
  Location        Location[]
  Unit            Unit[]
  Shortcut        Shortcut[]
  Event           Event[]
  Focus_Mission   FocusMission[]
  Subscribers     Subscribers[]
  BackgroudJobs   BackgroundJobs[]
  @@index([id, uuid, email])
}

model Location {
  id        Int      @id @default(autoincrement())
  location  Json    
  userId    Int
  isActivating  Boolean @default(false)
  createdAt DateTime @default(now())
  @@unique([id, userId], name: "isOwner")
  User     User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@index([userId])
}

model Unit {
  id        Int      @id @default(autoincrement())
  unit      Json
  userId    Int
  createdAt DateTime @default(now())
  @@unique([userId])
  User     User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@index([userId])
}

model Shortcut {
  id        Int      @id @default(autoincrement())
  url       String
  imageUrl  String
  name      String
  isPin     Boolean @default(false)
  userId    Int
  createdAt DateTime @default(now())
  @@unique([id, userId], name: "isOwner")
  User     User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@index([userId])
}

model Event {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  date          String?
  full_date     DateTime?
  type_time     Int
  schedule      Int
  country       String
  priority      Int
  userId        Int?
  createdAt     DateTime @default(now())
  @@unique([id, userId], name: "isOwner")
  User              User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  BackgroundJobs    BackgroundJobs[]
  @@index([userId])
}

model FocusMission {
  id            Int @default(autoincrement())
  duration      BigInt
  userId        Int
  createdAt     DateTime @default(now())
  @@unique([id, userId], name: "isOwner")
  User     User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@index([userId])

}

model Subscribers {
  id                  Int       @id @default(autoincrement())
  userId              Int
  uri_notification    String    @db.Text
  createdAt           DateTime  @default(now())
  User                User?     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@index([userId],   name: "user")
}

model BackgroundJobs {
  id                  Int             @id @default(autoincrement())
  eventId             Int?
  userId              Int?            
  createdAt           DateTime        @default(now())
  Event               Event?          @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  User                User?           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@index([userId], name: "userId")
}